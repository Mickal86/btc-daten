import requests
import pandas as pd
from datetime import datetime, timedelta
import os

# === Einstellungen ===
API_KEY = os.getenv("CMC_API_KEY")
CSV_PATH = "BTC_PL_Weekly_Data.csv"
GENESIS = datetime(2009, 1, 3)

# === Bestehende CSV laden ===
df = pd.read_csv(CSV_PATH, sep=";", decimal=",")
last_day = int(df["day_since_genesis"].max())
last_date = GENESIS + timedelta(days=last_day)

# === Nächster Sonntag nach dem letzten Eintrag ===
# Ziel: Sonntag 00:00 UTC (Wochenschluss)
next_sunday = last_date + timedelta(days=(6 - last_date.weekday()))  # Sonntag 00:00
next_sunday_str = next_sunday.strftime("%Y-%m-%d")

# Wenn der Sonntag in der Zukunft liegt: nicht weitermachen
if next_sunday > datetime.utcnow():
    print("Nächster Sonntag liegt in der Zukunft. Keine neuen Daten.")
    exit()

# === CoinMarketCap API anfragen ===
url = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/ohlcv/historical"

params = {
    "symbol": "BTC",
    "time_start": next_sunday_str,
    "time_end": next_sunday_str,
    "interval": "daily",  # Tagesdaten (wir brauchen nur Close)
    "convert": "USD"
}

headers = {
    "X-CMC_PRO_API_KEY": API_KEY
}

response = requests.get(url, params=params, headers=headers)
data = response.json()

# Fehlerbehandlung
if "data" not in data or len(data["data"]["quotes"]) == 0:
    raise Exception(f"Keine Daten verfügbar für {next_sunday_str}: {data}")

# Close-Preis extrahieren
quote = data["data"]["quotes"][0]
close_price = quote["quote"]["USD"]["close"]

# Tagesabstand berechnen
day_since_genesis = (next_sunday - GENESIS).days

# Neue Zeile anhängen
new_row = pd.DataFrame([[day_since_genesis, close_price]], columns=["day_since_genesis", "price"])
df = pd.concat([df, new_row], ignore_index=True)

# CSV überschreiben
df.to_csv(CSV_PATH, sep=";", decimal=",", index=False)
print(f"Wert für {next_sunday_str} erfolgreich ergänzt: {close_price:.2f} USD")
